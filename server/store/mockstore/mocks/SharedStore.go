// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	reacji "github.com/kaakaa/mattermost-plugin-reacji/server/reacji"
	mock "github.com/stretchr/testify/mock"
)

// SharedStore is an autogenerated mock type for the SharedStore type
type SharedStore struct {
	mock.Mock
}

// DeleteAll provides a mock function with given fields:
func (_m *SharedStore) DeleteAll() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: postID, toChannelID, deleteKey
func (_m *SharedStore) Get(postID string, toChannelID string, deleteKey string) (*reacji.SharedPost, error) {
	ret := _m.Called(postID, toChannelID, deleteKey)

	var r0 *reacji.SharedPost
	if rf, ok := ret.Get(0).(func(string, string, string) *reacji.SharedPost); ok {
		r0 = rf(postID, toChannelID, deleteKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reacji.SharedPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(postID, toChannelID, deleteKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: new, days
func (_m *SharedStore) Set(new *reacji.SharedPost, days int) error {
	ret := _m.Called(new, days)

	var r0 error
	if rf, ok := ret.Get(0).(func(*reacji.SharedPost, int) error); ok {
		r0 = rf(new, days)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
